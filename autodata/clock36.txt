################################################################################
##
## Filename: 	clock36.txt
## {{{
## Project:	SDR, a basic Soft(Gate)ware Defined Radio architecture
##
## Purpose:	Creates and defines a 36MHz clock for the rest of the design to
##		use as the system clock.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2019-2024, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
## }}}
@$CLKFREQHZ=36000000
@PREFIX=clk
@CLOCK.TOP=i_clk_12mhz
@CLOCK.NAME=clk
@TOP.DEFNS=
	wire		s_clk, s_reset, pll_locked;
	reg	[2:0]	reset_pipe;
	reg	[9:0]	rst_counter;
@TOP.INSERT=
	// No resets?
	// assign	s_reset = 1'b0;
	initial	reset_pipe = -1;
	always @(posedge s_clk, negedge pll_locked)
	if (!pll_locked)
		reset_pipe <= -1;
	else
		reset_pipe <= { reset_pipe[1:0], 1'b0 };

	initial	rst_counter = 0;
	always @(posedge s_clk)
	if (reset_pipe[2])
		rst_counter <= 0;
	else if (!rst_counter[9])
		rst_counter <= rst_counter + 1;

	assign	s_reset = !rst_counter[9];

`ifdef	VERILATOR
	assign	s_clk = i_clk;
	assign	pll_locked = 1'b1;
`else
	// wire		s_clk_36mhz;

	SB_PLL40_PAD #(
		/**
 		* PLL configuration
 		*
 		* This Verilog header file was generated automatically
 		* using the icepll tool from the IceStorm project.
 		* It is intended for use with FPGA primitives SB_PLL40_CORE,
 		* SB_PLL40_PAD, SB_PLL40_2_PAD, SB_PLL40_2F_CORE or
		* SB_PLL40_2F_PAD.
 		* Use at your own risk.
 		*
 		* Given input frequency:        12.000 MHz
 		* Requested output frequency:   36.000 MHz
 		* Achieved output frequency:    36.000 MHz
 		*/

		.FEEDBACK_PATH("SIMPLE"),
		.DIVR(4'b0000),		// DIVR =  0
		.DIVF(7'b0101111),	// DIVF = 47
		.DIVQ(3'b100),		// DIVQ =  4
		.FILTER_RANGE(3'b001)	// FILTER_RANGE = 1
	) pll (
		.PACKAGEPIN(i_clk_12mhz),
		// .PLLOUTCORE(s_clk_36mhz),
		.PLLOUTCORE(s_clk),
		.LOCK(pll_locked),
		.BYPASS(1'b0),
		.RESETB(1'b1));

	// SB_GB global_buffer(s_clk_36mhz, s_clk);
`endif

@REGDEFS.H.DEFNS=
#define	CLKFREQHZ	@$CLKFREQHZ
@BDEF.DEFN=
#define	CLKFREQHZ	@$CLKFREQHZ
@CLOCK.NAME=clk
@CLOCK.FREQUENCY= @$CLKFREQHZ
