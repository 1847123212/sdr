################################################################################
##
## Filename: 	hexbus.txt
## {{{
## Project:	SDR, a basic Soft(Gate)ware Defined Radio architecture
##
## Purpose:	To describe what needs to be done to make the UART to Wishbone
##		external bus master a part of the main .v and toplevel.v files.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2020-2024, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=hex
@ACCESS=HEXBUS_MASTER
@MASTER.BUS=wb
@MASTER.TYPE=HOST
@BUS.NAME=wb
@BUS.CLOCK=clk
@BUS.WIDTH=32
@$BAUDRATE=1000000
@CLOCK.NAME=clk
@$SETUP=@$(CLOCK.FREQUENCY) / @$BAUDRATE
@SETUP.FORMAT=24'h%x
@$BUS_ADDRESS_WIDTH=@$(MASTER.BUS.AWID)
@BP=@$(MASTER.PREFIX)
@MAIN.PORTLIST=
 		// UART/host to wishbone interface
 		i_host_uart_rx, o_host_uart_tx
@MAIN.IODECL=
	input	wire		i_host_uart_rx;
	output	wire		o_host_uart_tx;
@MAIN.DEFNS=
	//
	//
	// UART interface
	//
	//
	localparam  BUSUARTBITS = $clog2(@$SETUP);
	localparam [23:0] BUSUART = @$SETUP;	// @$BAUDRATE baud
	//
	wire		w_ck_uart, w_uart_tx;
	wire		rx_host_stb;
	wire	[7:0]	rx_host_data;
	wire		tx_host_stb;
	wire	[7:0]	tx_host_data;
	wire		tx_host_busy;
	//
@MAIN.INSERT=
	// The Host USB interface, to be used by the WB-UART bus
	rxuartlite	#(.TIMING_BITS(BUSUARTBITS[4:0]),
				.CLOCKS_PER_BAUD(BUSUART[BUSUARTBITS-1:0]))
	rcv(i_clk, i_host_uart_rx, rx_host_stb, rx_host_data);
	txuartlite	#(.TIMING_BITS(BUSUARTBITS[4:0]),
				.CLOCKS_PER_BAUD(BUSUART[BUSUARTBITS-1:0]))
	txv(i_clk, tx_host_stb, tx_host_data, o_host_uart_tx, tx_host_busy);

	hbbus #(.AW(@$(MASTER.BUS.AWID)))
	genbus(i_clk,
		rx_host_stb, rx_host_data,
		@$(MASTER.PORTLIST),
		1'b0,	// No interrupts defined
		tx_host_stb, tx_host_data, tx_host_busy);
#
@REGDEFS.H.DEFNS=
#define	BAUDRATE @$(BAUDRATE)
@SIM.CLOCK=clk
@SIM.INCLUDE=
#include "uartsim.h"
@SIM.DEFNS=
	UARTSIM	*m_dbgbus;
@SIM.INIT=
		m_dbgbus = new UARTSIM(FPGAPORT);
		m_dbgbus->setup(@$[%d](SETUP));
		m_core->i_host_uart_rx = 1;
@SIM.TICK=
		m_core->i_host_uart_rx = (*m_dbgbus)(m_core->o_host_uart_tx);
@RTL.MAKE.GROUP=HEXBUS
@RTL.MAKE.SUBD=hexbus
@RTL.MAKE.FILES= hbbus.v hbdechex.v hbdeword.v
	hbexec.v hbgenhex.v hbidle.v hbints.v hbnewline.v hbpack.v
@PREFIX=wbuart
@RTL.MAKE.GROUP=WBUART
@RTL.MAKE.SUBD=wbuart
@RTL.MAKE.FILES=rxuartlite.v txuartlite.v
