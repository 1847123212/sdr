################################################################################
##
## Filename: 	samplerate.txt
## {{{
## Project:	SDR, a basic Soft(Gate)ware Defined Radio architecture
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2020-2021, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=samplerate
@DEVID=SRATE
@REGS.N=2
@REGS.0=0 R_@$(DEVID) @$(DEVID)
@REGS.1=0 R_@$(DEVID) SAMPLERATE
@SLAVE.BUS=wb
@SLAVE.TYPE=SINGLE
@NADDR=1
@CKWIRE= @$(SLAVE.BUS.CLOCK.WIRE)
@CLKFREQ=@$(SLAVE.BUS.CLOCK.FREQUENCY)
@MAIN.DEFNS=
	reg	[$clog2(@$(SLAVE.BUS.CLOCK.FREQUENCY))-1:0]
			r_@$(PREFIX)_counter, r_@$(PREFIX)_counts;
	reg	[31:0]	r_@$(PREFIX)_result;
	reg		r_@$(PREFIX)_restart;

@MAIN.INSERT=
	initial	r_@$(PREFIX)_counter = 0;
	initial	r_@$(PREFIX)_restart = 1;
	always @(posedge  i_clk)
	/*
	if (i_reset)
	begin
		r_@$(PREFIX)_restart <= 1;
		r_@$(PREFIX)_counter <= 0;
	end else
	*/ begin
		if (r_@$(PREFIX)_restart)
			r_@$(PREFIX)_counter <= 0;
		else
			r_@$(PREFIX)_counter <= r_@$(PREFIX)_counter + 1;

		r_@$(PREFIX)_restart <= (r_@$(PREFIX)_counter == @$(CLKFREQ)-2);
	end

	initial	r_@$(PREFIX)_counts  = 0;
	initial	r_@$(PREFIX)_result  = 0;
	always @(posedge  i_clk)
	// if (i_reset)
	// begin
	//	r_@$(PREFIX)_counts  <= 0;
	//	r_@$(PREFIX)_result  <= 0;
	// end else
	if (r_@$(PREFIX)_restart)
	begin
		r_@$(PREFIX)_counts <= 0;
		r_@$(PREFIX)_result <= 0;
		r_@$(PREFIX)_result[$clog2(@$(SLAVE.BUS.CLOCK.FREQUENCY))-1:0]
			<= r_@$(PREFIX)_counts + (rfdbg_ce ? 1:0);
	end else if (rfdbg_ce)
		r_@$(PREFIX)_counts <= r_@$(PREFIX)_counts + 1;

	assign @$(SLAVE.PREFIX)_stall = 1'b0;
	assign @$(SLAVE.PREFIX)_ack   = @$(SLAVE.PREFIX)_stb;
	assign @$(SLAVE.PREFIX)_idata = r_@$(PREFIX)_result;
